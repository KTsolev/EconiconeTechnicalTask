// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddNewItem tests should handle call mockToggleEditTask task 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "flexDirection": "row",
      "justifyContent": "space-evenly",
      "marginVertical": 4,
      "paddingHorizontal": 10,
      "paddingVertical": 14,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "flexDirection": "row",
        "justifyContent": "center",
        "marginVertical": 4,
        "paddingHorizontal": 10,
        "paddingVertical": 14,
      }
    }
  >
    <View
      accessibilityRole="checkbox"
      accessibilityState={
        Object {
          "checked": false,
          "disabled": false,
        }
      }
      accessibilityValue={
        Object {
          "text": "off",
        }
      }
      accessible={true}
      pointerEvents="auto"
      testID="completeEdit"
    >
      <RNCCheckbox
        forwardedRef={null}
        onValueChange={[Function]}
        style={
          Array [
            Object {
              "backgroundColor": "transparent",
              "height": 32,
              "width": 32,
            },
            undefined,
          ]
        }
        value={false}
      />
    </View>
    <View
      style={
        Object {
          "alignItems": "center",
          "borderColor": "#888888",
          "borderRadius": 6,
          "borderWidth": 1,
          "flex": 0.82,
          "justifyContent": "center",
          "marginHorizontal": 4,
          "position": "relative",
        }
      }
    >
      <TextInput
        keyboardType="default"
        onBlur={[Function]}
        onChangeText={[Function]}
        onEndEditing={[Function]}
        placeholder="Enter new task"
        style={
          Array [
            Object {
              "color": "#888888",
              "fontWeight": "600",
              "maxHeight": 120,
              "minHeight": 40,
              "padding": 10,
            },
          ]
        }
        testID="input"
        value="sampletask"
      />
    </View>
    <View
      accessibilityState={
        Object {
          "disabled": false,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#1c90ff",
          "borderRadius": 6,
          "flex": 0.5,
          "justifyContent": "center",
          "marginHorizontal": 4,
          "maxHeight": 68,
          "maxWidth": 184,
          "minHeight": 40,
          "opacity": 1,
          "padding": 10,
        }
      }
      testID="createButton"
    >
      <Text
        style={
          Object {
            "color": "#fff",
            "fontWeight": "600",
            "textAlign": "center",
          }
        }
      >
        Edit Task
      </Text>
    </View>
  </View>
</View>
`;

exports[`AddNewItem tests should handle case readOnly task 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "flexDirection": "row",
      "justifyContent": "space-evenly",
      "marginVertical": 4,
      "paddingHorizontal": 10,
      "paddingVertical": 14,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "flexDirection": "row",
        "justifyContent": "center",
        "marginVertical": 4,
        "paddingHorizontal": 10,
        "paddingVertical": 14,
      }
    }
  >
    <View
      accessibilityRole="checkbox"
      accessibilityState={
        Object {
          "checked": false,
          "disabled": false,
        }
      }
      accessibilityValue={
        Object {
          "text": "off",
        }
      }
      accessible={true}
      pointerEvents="auto"
      testID="completeEdit"
    >
      <RNCCheckbox
        forwardedRef={null}
        onValueChange={[Function]}
        style={
          Array [
            Object {
              "backgroundColor": "transparent",
              "height": 32,
              "width": 32,
            },
            undefined,
          ]
        }
        value={false}
      />
    </View>
    <View
      style={
        Object {
          "alignItems": "center",
          "borderColor": "#888888",
          "borderRadius": 6,
          "borderWidth": 1,
          "flex": 0.82,
          "justifyContent": "center",
          "marginHorizontal": 4,
          "position": "relative",
        }
      }
    >
      <TextInput
        keyboardType="default"
        onBlur={[Function]}
        onChangeText={[Function]}
        onEndEditing={[Function]}
        placeholder="Enter new task"
        style={
          Array [
            Object {
              "color": "#888888",
              "fontWeight": "600",
              "maxHeight": 120,
              "minHeight": 40,
              "padding": 10,
            },
          ]
        }
        testID="input"
        value="Fix ability to togle a task"
      />
    </View>
    <View
      accessibilityState={
        Object {
          "disabled": false,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#1c90ff",
          "borderRadius": 6,
          "flex": 0.5,
          "justifyContent": "center",
          "marginHorizontal": 4,
          "maxHeight": 68,
          "maxWidth": 184,
          "minHeight": 40,
          "opacity": 1,
          "padding": 10,
        }
      }
      testID="createButton"
    >
      <Text
        style={
          Object {
            "color": "#fff",
            "fontWeight": "600",
            "textAlign": "center",
          }
        }
      >
        Edit Task
      </Text>
    </View>
  </View>
</View>
`;

exports[`AddNewItem tests should handle case when item is null 1`] = `null`;

exports[`AddNewItem tests should handle complete task 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "flexDirection": "row",
      "justifyContent": "space-evenly",
      "marginVertical": 4,
      "paddingHorizontal": 10,
      "paddingVertical": 14,
    }
  }
>
  <View
    accessibilityRole="checkbox"
    accessibilityState={
      Object {
        "checked": true,
        "disabled": false,
      }
    }
    accessibilityValue={
      Object {
        "text": "on",
      }
    }
    accessible={true}
    pointerEvents="auto"
    testID="complete"
  >
    <RNCCheckbox
      forwardedRef={null}
      onValueChange={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "height": 32,
            "width": 32,
          },
          undefined,
        ]
      }
      value={true}
    />
  </View>
  <Text
    style={
      Array [
        Object {
          "color": "#282C34",
          "flex": 0.8,
          "fontSize": 16,
          "paddingLeft": 4,
        },
        Object {
          "textDecorationColor": "#000",
          "textDecorationLine": "line-through",
          "textDecorationStyle": "solid",
        },
      ]
    }
  >
    Fix ability to togle a task
  </Text>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#334488",
        "borderRadius": 14,
        "height": 20,
        "justifyContent": "center",
        "opacity": 1,
        "padding": 14,
        "width": 20,
      }
    }
    testID="edit"
  >
    <i
      className="fa undefined"
      color="#fff"
      icon={
        Object {
          "icon": Array [
            512,
            512,
            Array [
              61504,
              9999,
              "pencil-alt",
            ],
            "f303",
            "M421.7 220.3L188.5 453.4L154.6 419.5L158.1 416H112C103.2 416 96 408.8 96 400V353.9L92.51 357.4C87.78 362.2 84.31 368 82.42 374.4L59.44 452.6L137.6 429.6C143.1 427.7 149.8 424.2 154.6 419.5L188.5 453.4C178.1 463.8 165.2 471.5 151.1 475.6L30.77 511C22.35 513.5 13.24 511.2 7.03 504.1C.8198 498.8-1.502 489.7 .976 481.2L36.37 360.9C40.53 346.8 48.16 333.9 58.57 323.5L291.7 90.34L421.7 220.3zM492.7 58.75C517.7 83.74 517.7 124.3 492.7 149.3L444.3 197.7L314.3 67.72L362.7 19.32C387.7-5.678 428.3-5.678 453.3 19.32L492.7 58.75z",
          ],
          "iconName": "pencil",
          "prefix": "fas",
        }
      }
    />
  </View>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#ff3344",
        "borderRadius": 14,
        "height": 20,
        "justifyContent": "center",
        "opacity": 1,
        "padding": 14,
        "width": 20,
      }
    }
    testID="delete"
  >
    <i
      className="fa undefined"
      color="#fff"
      icon={
        Object {
          "icon": Array [
            320,
            512,
            Array [
              128473,
              10005,
              10006,
              10060,
              215,
              "close",
              "multiply",
              "remove",
              "times",
            ],
            "f00d",
            "M310.6 361.4c12.5 12.5 12.5 32.75 0 45.25C304.4 412.9 296.2 416 288 416s-16.38-3.125-22.62-9.375L160 301.3L54.63 406.6C48.38 412.9 40.19 416 32 416S15.63 412.9 9.375 406.6c-12.5-12.5-12.5-32.75 0-45.25l105.4-105.4L9.375 150.6c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L160 210.8l105.4-105.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-105.4 105.4L310.6 361.4z",
          ],
          "iconName": "xmark",
          "prefix": "fas",
        }
      }
    />
  </View>
</View>
`;

exports[`AddNewItem tests should handle delete task 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "flexDirection": "row",
      "justifyContent": "space-evenly",
      "marginVertical": 4,
      "paddingHorizontal": 10,
      "paddingVertical": 14,
    }
  }
>
  <View
    accessibilityRole="checkbox"
    accessibilityState={
      Object {
        "checked": true,
        "disabled": false,
      }
    }
    accessibilityValue={
      Object {
        "text": "on",
      }
    }
    accessible={true}
    pointerEvents="auto"
    testID="complete"
  >
    <RNCCheckbox
      forwardedRef={null}
      onValueChange={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "height": 32,
            "width": 32,
          },
          undefined,
        ]
      }
      value={true}
    />
  </View>
  <Text
    style={
      Array [
        Object {
          "color": "#282C34",
          "flex": 0.8,
          "fontSize": 16,
          "paddingLeft": 4,
        },
        Object {
          "textDecorationColor": "#000",
          "textDecorationLine": "line-through",
          "textDecorationStyle": "solid",
        },
      ]
    }
  >
    Fix ability to togle a task
  </Text>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#334488",
        "borderRadius": 14,
        "height": 20,
        "justifyContent": "center",
        "opacity": 1,
        "padding": 14,
        "width": 20,
      }
    }
    testID="edit"
  >
    <i
      className="fa undefined"
      color="#fff"
      icon={
        Object {
          "icon": Array [
            512,
            512,
            Array [
              61504,
              9999,
              "pencil-alt",
            ],
            "f303",
            "M421.7 220.3L188.5 453.4L154.6 419.5L158.1 416H112C103.2 416 96 408.8 96 400V353.9L92.51 357.4C87.78 362.2 84.31 368 82.42 374.4L59.44 452.6L137.6 429.6C143.1 427.7 149.8 424.2 154.6 419.5L188.5 453.4C178.1 463.8 165.2 471.5 151.1 475.6L30.77 511C22.35 513.5 13.24 511.2 7.03 504.1C.8198 498.8-1.502 489.7 .976 481.2L36.37 360.9C40.53 346.8 48.16 333.9 58.57 323.5L291.7 90.34L421.7 220.3zM492.7 58.75C517.7 83.74 517.7 124.3 492.7 149.3L444.3 197.7L314.3 67.72L362.7 19.32C387.7-5.678 428.3-5.678 453.3 19.32L492.7 58.75z",
          ],
          "iconName": "pencil",
          "prefix": "fas",
        }
      }
    />
  </View>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#ff3344",
        "borderRadius": 14,
        "height": 20,
        "justifyContent": "center",
        "opacity": 1,
        "padding": 14,
        "width": 20,
      }
    }
    testID="delete"
  >
    <i
      className="fa undefined"
      color="#fff"
      icon={
        Object {
          "icon": Array [
            320,
            512,
            Array [
              128473,
              10005,
              10006,
              10060,
              215,
              "close",
              "multiply",
              "remove",
              "times",
            ],
            "f00d",
            "M310.6 361.4c12.5 12.5 12.5 32.75 0 45.25C304.4 412.9 296.2 416 288 416s-16.38-3.125-22.62-9.375L160 301.3L54.63 406.6C48.38 412.9 40.19 416 32 416S15.63 412.9 9.375 406.6c-12.5-12.5-12.5-32.75 0-45.25l105.4-105.4L9.375 150.6c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L160 210.8l105.4-105.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-105.4 105.4L310.6 361.4z",
          ],
          "iconName": "xmark",
          "prefix": "fas",
        }
      }
    />
  </View>
</View>
`;

exports[`AddNewItem tests should handle edit task 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "flexDirection": "row",
      "justifyContent": "space-evenly",
      "marginVertical": 4,
      "paddingHorizontal": 10,
      "paddingVertical": 14,
    }
  }
>
  <View
    accessibilityRole="checkbox"
    accessibilityState={
      Object {
        "checked": true,
        "disabled": false,
      }
    }
    accessibilityValue={
      Object {
        "text": "on",
      }
    }
    accessible={true}
    pointerEvents="auto"
    testID="complete"
  >
    <RNCCheckbox
      forwardedRef={null}
      onValueChange={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "height": 32,
            "width": 32,
          },
          undefined,
        ]
      }
      value={true}
    />
  </View>
  <Text
    style={
      Array [
        Object {
          "color": "#282C34",
          "flex": 0.8,
          "fontSize": 16,
          "paddingLeft": 4,
        },
        Object {
          "textDecorationColor": "#000",
          "textDecorationLine": "line-through",
          "textDecorationStyle": "solid",
        },
      ]
    }
  >
    Fix ability to togle a task
  </Text>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#334488",
        "borderRadius": 14,
        "height": 20,
        "justifyContent": "center",
        "opacity": 1,
        "padding": 14,
        "width": 20,
      }
    }
    testID="edit"
  >
    <i
      className="fa undefined"
      color="#fff"
      icon={
        Object {
          "icon": Array [
            512,
            512,
            Array [
              61504,
              9999,
              "pencil-alt",
            ],
            "f303",
            "M421.7 220.3L188.5 453.4L154.6 419.5L158.1 416H112C103.2 416 96 408.8 96 400V353.9L92.51 357.4C87.78 362.2 84.31 368 82.42 374.4L59.44 452.6L137.6 429.6C143.1 427.7 149.8 424.2 154.6 419.5L188.5 453.4C178.1 463.8 165.2 471.5 151.1 475.6L30.77 511C22.35 513.5 13.24 511.2 7.03 504.1C.8198 498.8-1.502 489.7 .976 481.2L36.37 360.9C40.53 346.8 48.16 333.9 58.57 323.5L291.7 90.34L421.7 220.3zM492.7 58.75C517.7 83.74 517.7 124.3 492.7 149.3L444.3 197.7L314.3 67.72L362.7 19.32C387.7-5.678 428.3-5.678 453.3 19.32L492.7 58.75z",
          ],
          "iconName": "pencil",
          "prefix": "fas",
        }
      }
    />
  </View>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#ff3344",
        "borderRadius": 14,
        "height": 20,
        "justifyContent": "center",
        "opacity": 1,
        "padding": 14,
        "width": 20,
      }
    }
    testID="delete"
  >
    <i
      className="fa undefined"
      color="#fff"
      icon={
        Object {
          "icon": Array [
            320,
            512,
            Array [
              128473,
              10005,
              10006,
              10060,
              215,
              "close",
              "multiply",
              "remove",
              "times",
            ],
            "f00d",
            "M310.6 361.4c12.5 12.5 12.5 32.75 0 45.25C304.4 412.9 296.2 416 288 416s-16.38-3.125-22.62-9.375L160 301.3L54.63 406.6C48.38 412.9 40.19 416 32 416S15.63 412.9 9.375 406.6c-12.5-12.5-12.5-32.75 0-45.25l105.4-105.4L9.375 150.6c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L160 210.8l105.4-105.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-105.4 105.4L310.6 361.4z",
          ],
          "iconName": "xmark",
          "prefix": "fas",
        }
      }
    />
  </View>
</View>
`;

exports[`AddNewItem tests should render component 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "flexDirection": "row",
      "justifyContent": "space-evenly",
      "marginVertical": 4,
      "paddingHorizontal": 10,
      "paddingVertical": 14,
    }
  }
>
  <View
    accessibilityRole="checkbox"
    accessibilityState={
      Object {
        "checked": true,
        "disabled": false,
      }
    }
    accessibilityValue={
      Object {
        "text": "on",
      }
    }
    accessible={true}
    pointerEvents="auto"
    testID="complete"
  >
    <RNCCheckbox
      forwardedRef={null}
      onValueChange={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "height": 32,
            "width": 32,
          },
          undefined,
        ]
      }
      value={true}
    />
  </View>
  <Text
    style={
      Array [
        Object {
          "color": "#282C34",
          "flex": 0.8,
          "fontSize": 16,
          "paddingLeft": 4,
        },
        Object {
          "textDecorationColor": "#000",
          "textDecorationLine": "line-through",
          "textDecorationStyle": "solid",
        },
      ]
    }
  >
    Fix ability to togle a task
  </Text>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#334488",
        "borderRadius": 14,
        "height": 20,
        "justifyContent": "center",
        "opacity": 1,
        "padding": 14,
        "width": 20,
      }
    }
    testID="edit"
  >
    <i
      className="fa undefined"
      color="#fff"
      icon={
        Object {
          "icon": Array [
            512,
            512,
            Array [
              61504,
              9999,
              "pencil-alt",
            ],
            "f303",
            "M421.7 220.3L188.5 453.4L154.6 419.5L158.1 416H112C103.2 416 96 408.8 96 400V353.9L92.51 357.4C87.78 362.2 84.31 368 82.42 374.4L59.44 452.6L137.6 429.6C143.1 427.7 149.8 424.2 154.6 419.5L188.5 453.4C178.1 463.8 165.2 471.5 151.1 475.6L30.77 511C22.35 513.5 13.24 511.2 7.03 504.1C.8198 498.8-1.502 489.7 .976 481.2L36.37 360.9C40.53 346.8 48.16 333.9 58.57 323.5L291.7 90.34L421.7 220.3zM492.7 58.75C517.7 83.74 517.7 124.3 492.7 149.3L444.3 197.7L314.3 67.72L362.7 19.32C387.7-5.678 428.3-5.678 453.3 19.32L492.7 58.75z",
          ],
          "iconName": "pencil",
          "prefix": "fas",
        }
      }
    />
  </View>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#ff3344",
        "borderRadius": 14,
        "height": 20,
        "justifyContent": "center",
        "opacity": 1,
        "padding": 14,
        "width": 20,
      }
    }
    testID="delete"
  >
    <i
      className="fa undefined"
      color="#fff"
      icon={
        Object {
          "icon": Array [
            320,
            512,
            Array [
              128473,
              10005,
              10006,
              10060,
              215,
              "close",
              "multiply",
              "remove",
              "times",
            ],
            "f00d",
            "M310.6 361.4c12.5 12.5 12.5 32.75 0 45.25C304.4 412.9 296.2 416 288 416s-16.38-3.125-22.62-9.375L160 301.3L54.63 406.6C48.38 412.9 40.19 416 32 416S15.63 412.9 9.375 406.6c-12.5-12.5-12.5-32.75 0-45.25l105.4-105.4L9.375 150.6c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L160 210.8l105.4-105.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-105.4 105.4L310.6 361.4z",
          ],
          "iconName": "xmark",
          "prefix": "fas",
        }
      }
    />
  </View>
</View>
`;
